<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>编程 on 往往不的攻略笔记</title>
    <link>https://www.wangwangbu.com/type/%E7%BC%96%E7%A8%8B/</link>
    <description>Recent content in 编程 on 往往不的攻略笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 18 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://www.wangwangbu.com/type/%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RPC 远程过程调用</title>
      <link>https://www.wangwangbu.com/posts/zettel/z-rpc/</link>
      <pubDate>Tue, 18 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.wangwangbu.com/posts/zettel/z-rpc/</guid>
      <description>远程过程调用（Remote Procedure Call, RPC）是一种通讯协议，用于请求服务，包含传输协议和序列化协议。 和 HTTP 的区别： HTTP 是一种传输协议，而 RPC 是一种通讯方</description>
    </item>
    
    <item>
      <title>WebSocket</title>
      <link>https://www.wangwangbu.com/posts/zettel/z-websocket/</link>
      <pubDate>Tue, 04 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.wangwangbu.com/posts/zettel/z-websocket/</guid>
      <description>WebSocket 是一个通过单个 TCP 连接提供全双工通信的协议，使服务器能够主动向客户端推送消息。</description>
    </item>
    
    <item>
      <title>JWT 验证</title>
      <link>https://www.wangwangbu.com/posts/zettel/z-jwt/</link>
      <pubDate>Sun, 02 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.wangwangbu.com/posts/zettel/z-jwt/</guid>
      <description>JWT 是一种网站登录状态的验证方式，服务端通过验证特定 token 来判断用户是否登录、访问权限等状态。主要特点是不依赖服务端状态，可以跨域验证。一个 JWT 格式</description>
    </item>
    
    <item>
      <title>Go原理：调度器和GPM模型</title>
      <link>https://www.wangwangbu.com/posts/tech/go-principle/b-go-gpm/</link>
      <pubDate>Mon, 20 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.wangwangbu.com/posts/tech/go-principle/b-go-gpm/</guid>
      <description>Go 的调度器原理学习记录，深入理解 GPM 模型，了解 Go 并发能力的来源。</description>
    </item>
    
    <item>
      <title>Go 标准库：sort</title>
      <link>https://www.wangwangbu.com/posts/tech/go-std/b-go-sort/</link>
      <pubDate>Sun, 19 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.wangwangbu.com/posts/tech/go-std/b-go-sort/</guid>
      <description>Go 标准库学习之 sort， 实现排序、自定义规则、对结构体排序。</description>
    </item>
    
    <item>
      <title>Go 标准库：container/heap</title>
      <link>https://www.wangwangbu.com/posts/tech/go-std/b-go-heap/</link>
      <pubDate>Wed, 15 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.wangwangbu.com/posts/tech/go-std/b-go-heap/</guid>
      <description>Go 标准库学习之 container/heap 实现数据结构——堆。</description>
    </item>
    
    <item>
      <title>Go 标准库：container/list</title>
      <link>https://www.wangwangbu.com/posts/tech/go-std/b-go-list/</link>
      <pubDate>Tue, 14 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.wangwangbu.com/posts/tech/go-std/b-go-list/</guid>
      <description>Go 标准库学习之 container/list 实现数据结构——双向链表。</description>
    </item>
    
    <item>
      <title>Memcached 和 Groupcache</title>
      <link>https://www.wangwangbu.com/posts/zettel/z-memcached%E5%92%8Cgroupcache/</link>
      <pubDate>Fri, 10 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.wangwangbu.com/posts/zettel/z-memcached%E5%92%8Cgroupcache/</guid>
      <description>Memcached 是一套分布式高速缓存系统，是基于内存的 key-value 存储。Groupcache 是同一作者开发的 Go 语言版本。 Memcached 的优点： 协议简单 基于 libevent 事件处理（libev</description>
    </item>
    
    <item>
      <title>ORM</title>
      <link>https://www.wangwangbu.com/posts/zettel/z-orm/</link>
      <pubDate>Fri, 10 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.wangwangbu.com/posts/zettel/z-orm/</guid>
      <description>对象关系映射（Object Relational Mapping，简称ORM）是通过使用描述对象和数据库之间映射的元数据，将面向对象语言程序中的对象自动持久化到关</description>
    </item>
    
    <item>
      <title>Protocol Buffers</title>
      <link>https://www.wangwangbu.com/posts/zettel/z-protobuf/</link>
      <pubDate>Thu, 09 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.wangwangbu.com/posts/zettel/z-protobuf/</guid>
      <description>Protocol Buffers（protobuf）是一种以二进制方式存储的结构化数据存储格式，占用空间小，可读性差，多用于 RPC 数据格式。在.proto文件中</description>
    </item>
    
    <item>
      <title>一致性哈希</title>
      <link>https://www.wangwangbu.com/posts/zettel/z-%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C/</link>
      <pubDate>Thu, 09 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.wangwangbu.com/posts/zettel/z-%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C/</guid>
      <description>对于给定的 key，使用哈希值确定获取资源的节点，防止不同节点重复缓存同一资源。一致性哈希将 key 和节点都映射到 2^32 的环形空间，使用顺时针找到的第一</description>
    </item>
    
    <item>
      <title>缓存问题</title>
      <link>https://www.wangwangbu.com/posts/zettel/z-%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 09 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.wangwangbu.com/posts/zettel/z-%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/</guid>
      <description>缓存雪崩：缓存在同一时刻全部失效，造成瞬时 DB 请求量大、压力骤增，引起雪崩。缓存雪崩通常因为缓存服务器宕机、缓存的 key 设置了相同的过期时间等引起</description>
    </item>
    
    <item>
      <title>缓存淘汰策略</title>
      <link>https://www.wangwangbu.com/posts/zettel/z-%E7%BC%93%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5/</link>
      <pubDate>Tue, 07 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.wangwangbu.com/posts/zettel/z-%E7%BC%93%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5/</guid>
      <description>FIFO (First In First Out): 先进先出，淘汰缓存中最早添加的，用队列可以实现。 LFU (Least Frequently Used): 最少使用，淘汰缓存中访问频率最低的，维护一个按访问次数排序的队列。 缺点是受</description>
    </item>
    
    <item>
      <title>Go Module</title>
      <link>https://www.wangwangbu.com/posts/zettel/z-go-module/</link>
      <pubDate>Tue, 21 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.wangwangbu.com/posts/zettel/z-go-module/</guid>
      <description>GOPATH 是老版本的包管理模式，之后是 Go Vendor，Go Module 是新的方式。Go Vendor 是将所有包放在 vendor 目录下，Go Module 会将依赖安装在GOPATH/pkg/mo</description>
    </item>
    
  </channel>
</rss>
